// Code generated by "enumer -type Action -trimprefix Action -transform snake -text"; DO NOT EDIT.

package telegram

import (
	"fmt"
	"strings"
)

const _ActionName = "create_groupedit_group_photoinvite_membersjoin_group_by_linkpin_messageremove_membersphone_call"

var _ActionIndex = [...]uint8{0, 12, 28, 42, 60, 71, 85, 95}

const _ActionLowerName = "create_groupedit_group_photoinvite_membersjoin_group_by_linkpin_messageremove_membersphone_call"

func (i Action) String() string {
	if i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionNoOp() {
	var x [1]struct{}
	_ = x[ActionCreateGroup-(0)]
	_ = x[ActionEditGroupPhoto-(1)]
	_ = x[ActionInviteMembers-(2)]
	_ = x[ActionJoinGroupByLink-(3)]
	_ = x[ActionPinMessage-(4)]
	_ = x[ActionRemoveMembers-(5)]
	_ = x[ActionPhoneCall-(6)]
}

var _ActionValues = []Action{ActionCreateGroup, ActionEditGroupPhoto, ActionInviteMembers, ActionJoinGroupByLink, ActionPinMessage, ActionRemoveMembers, ActionPhoneCall}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:12]:       ActionCreateGroup,
	_ActionLowerName[0:12]:  ActionCreateGroup,
	_ActionName[12:28]:      ActionEditGroupPhoto,
	_ActionLowerName[12:28]: ActionEditGroupPhoto,
	_ActionName[28:42]:      ActionInviteMembers,
	_ActionLowerName[28:42]: ActionInviteMembers,
	_ActionName[42:60]:      ActionJoinGroupByLink,
	_ActionLowerName[42:60]: ActionJoinGroupByLink,
	_ActionName[60:71]:      ActionPinMessage,
	_ActionLowerName[60:71]: ActionPinMessage,
	_ActionName[71:85]:      ActionRemoveMembers,
	_ActionLowerName[71:85]: ActionRemoveMembers,
	_ActionName[85:95]:      ActionPhoneCall,
	_ActionLowerName[85:95]: ActionPhoneCall,
}

var _ActionNames = []string{
	_ActionName[0:12],
	_ActionName[12:28],
	_ActionName[28:42],
	_ActionName[42:60],
	_ActionName[60:71],
	_ActionName[71:85],
	_ActionName[85:95],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Action
func (i Action) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Action
func (i *Action) UnmarshalText(text []byte) error {
	var err error
	*i, err = ActionString(string(text))
	return err
}

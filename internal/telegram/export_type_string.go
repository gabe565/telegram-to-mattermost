// Code generated by "enumer -type ExportType -trimprefix Type -transform snake -text -output export_type_string.go"; DO NOT EDIT.

package telegram

import (
	"fmt"
	"strings"
)

const _ExportTypeName = "personal_chatprivate_group"

var _ExportTypeIndex = [...]uint8{0, 13, 26}

const _ExportTypeLowerName = "personal_chatprivate_group"

func (i ExportType) String() string {
	if i >= ExportType(len(_ExportTypeIndex)-1) {
		return fmt.Sprintf("ExportType(%d)", i)
	}
	return _ExportTypeName[_ExportTypeIndex[i]:_ExportTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExportTypeNoOp() {
	var x [1]struct{}
	_ = x[TypePersonalChat-(0)]
	_ = x[TypePrivateGroup-(1)]
}

var _ExportTypeValues = []ExportType{TypePersonalChat, TypePrivateGroup}

var _ExportTypeNameToValueMap = map[string]ExportType{
	_ExportTypeName[0:13]:       TypePersonalChat,
	_ExportTypeLowerName[0:13]:  TypePersonalChat,
	_ExportTypeName[13:26]:      TypePrivateGroup,
	_ExportTypeLowerName[13:26]: TypePrivateGroup,
}

var _ExportTypeNames = []string{
	_ExportTypeName[0:13],
	_ExportTypeName[13:26],
}

// ExportTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExportTypeString(s string) (ExportType, error) {
	if val, ok := _ExportTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExportTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExportType values", s)
}

// ExportTypeValues returns all values of the enum
func ExportTypeValues() []ExportType {
	return _ExportTypeValues
}

// ExportTypeStrings returns a slice of all String values of the enum
func ExportTypeStrings() []string {
	strs := make([]string, len(_ExportTypeNames))
	copy(strs, _ExportTypeNames)
	return strs
}

// IsAExportType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExportType) IsAExportType() bool {
	for _, v := range _ExportTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ExportType
func (i ExportType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ExportType
func (i *ExportType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ExportTypeString(string(text))
	return err
}

// Code generated by "enumer -type TextEntityType -trimprefix Type -transform lower -text"; DO NOT EDIT.

package telegram

import (
	"fmt"
	"strings"
)

const _TextEntityTypeName = "plainlinkboldmentionhashtagitalicemailphonecodepre"

var _TextEntityTypeIndex = [...]uint8{0, 5, 9, 13, 20, 27, 33, 38, 43, 47, 50}

const _TextEntityTypeLowerName = "plainlinkboldmentionhashtagitalicemailphonecodepre"

func (i TextEntityType) String() string {
	if i >= TextEntityType(len(_TextEntityTypeIndex)-1) {
		return fmt.Sprintf("TextEntityType(%d)", i)
	}
	return _TextEntityTypeName[_TextEntityTypeIndex[i]:_TextEntityTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TextEntityTypeNoOp() {
	var x [1]struct{}
	_ = x[TypePlain-(0)]
	_ = x[TypeLink-(1)]
	_ = x[TypeBold-(2)]
	_ = x[TypeMention-(3)]
	_ = x[TypeHashtag-(4)]
	_ = x[TypeItalic-(5)]
	_ = x[TypeEmail-(6)]
	_ = x[TypePhone-(7)]
	_ = x[TypeCode-(8)]
	_ = x[TypePre-(9)]
}

var _TextEntityTypeValues = []TextEntityType{TypePlain, TypeLink, TypeBold, TypeMention, TypeHashtag, TypeItalic, TypeEmail, TypePhone, TypeCode, TypePre}

var _TextEntityTypeNameToValueMap = map[string]TextEntityType{
	_TextEntityTypeName[0:5]:        TypePlain,
	_TextEntityTypeLowerName[0:5]:   TypePlain,
	_TextEntityTypeName[5:9]:        TypeLink,
	_TextEntityTypeLowerName[5:9]:   TypeLink,
	_TextEntityTypeName[9:13]:       TypeBold,
	_TextEntityTypeLowerName[9:13]:  TypeBold,
	_TextEntityTypeName[13:20]:      TypeMention,
	_TextEntityTypeLowerName[13:20]: TypeMention,
	_TextEntityTypeName[20:27]:      TypeHashtag,
	_TextEntityTypeLowerName[20:27]: TypeHashtag,
	_TextEntityTypeName[27:33]:      TypeItalic,
	_TextEntityTypeLowerName[27:33]: TypeItalic,
	_TextEntityTypeName[33:38]:      TypeEmail,
	_TextEntityTypeLowerName[33:38]: TypeEmail,
	_TextEntityTypeName[38:43]:      TypePhone,
	_TextEntityTypeLowerName[38:43]: TypePhone,
	_TextEntityTypeName[43:47]:      TypeCode,
	_TextEntityTypeLowerName[43:47]: TypeCode,
	_TextEntityTypeName[47:50]:      TypePre,
	_TextEntityTypeLowerName[47:50]: TypePre,
}

var _TextEntityTypeNames = []string{
	_TextEntityTypeName[0:5],
	_TextEntityTypeName[5:9],
	_TextEntityTypeName[9:13],
	_TextEntityTypeName[13:20],
	_TextEntityTypeName[20:27],
	_TextEntityTypeName[27:33],
	_TextEntityTypeName[33:38],
	_TextEntityTypeName[38:43],
	_TextEntityTypeName[43:47],
	_TextEntityTypeName[47:50],
}

// TextEntityTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TextEntityTypeString(s string) (TextEntityType, error) {
	if val, ok := _TextEntityTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TextEntityTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TextEntityType values", s)
}

// TextEntityTypeValues returns all values of the enum
func TextEntityTypeValues() []TextEntityType {
	return _TextEntityTypeValues
}

// TextEntityTypeStrings returns a slice of all String values of the enum
func TextEntityTypeStrings() []string {
	strs := make([]string, len(_TextEntityTypeNames))
	copy(strs, _TextEntityTypeNames)
	return strs
}

// IsATextEntityType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TextEntityType) IsATextEntityType() bool {
	for _, v := range _TextEntityTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for TextEntityType
func (i TextEntityType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TextEntityType
func (i *TextEntityType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TextEntityTypeString(string(text))
	return err
}
